---
import lightspeedImage from "../../../../assets/lst.png";
import othelloImage from "../../../../assets/othello.png";
import sudokuImage from "../../../../assets/sudoku.png";
import retrieveJobsImage from "../../../../assets/retrieve-jobs.png";
import { PROJECTS_ID } from "../../utils/section-id-list";
import { Image } from "astro:assets";

const projects = [
  {
    name: "Retrieve Jobs",
    image: retrieveJobsImage,
    description:
      "An app that allows the user to download job output from mainframes. Available as a web app or a cross-platform desktop app. Reliably serves the needs of 100+ users.",
    tools: "Next.js · TypeScript · Rust · Tauri · TailwindCSS",
    project_href: "https://retrieve-jobs.vercel.app/",
    source_code_href: "https://github.com/RyanGroch/retrieve-jobs",
  },
  {
    name: "Lightspeed Triggers",
    image: lightspeedImage,
    description:
      "An ecommerce store that integrates with Stripe. Includes cart functionality for visitors of the site, and CRUD functionality for the administrator.",
    tools: "PHP · Laravel · React.js · TypeScript · TailwindCSS",
    project_href: "https://lightspeedtriggers.com",
    source_code_href: "",
  },
  {
    name: "Othello AI",
    image: othelloImage,
    description:
      "An app which allows the user to play Othello - a two player strategy game comparable to Chess or Checkers. The AI uses a minimax algorithm and plays fairly well on higher difficulties.",
    tools: "React · Vite · TypeScript",
    project_href: "https://ryangroch.github.io/othello-ai-v2/",
    source_code_href: "https://github.com/ryangroch/othello-ai-v2",
  },
  {
    name: "Sudoku Generator",
    image: sudokuImage,
    description:
      "This app generates random Sudoku puzzles through recursive backtracking, and allows the user to solve the puzzles. It can also visualize the solving algorithm.",
    tools: "Vanilla JS · Vite · SASS",
    project_href: "https://ryangroch.github.io/sudoku-v2/",
    source_code_href: "https://github.com/ryangroch/sudoku-v2",
  },
];
---

<section class="flex justify-center pt-36" id={PROJECTS_ID}>
  <div class="container">
    <h2
      class="pb-4 text-center font-neon text-[2.75rem] tracking-wider text-secondary shadow-secondary xs:text-6xl sm:text-7xl lg:text-8xl"
    >
      P<span class="animate-blink1">o</span>rtfolio
    </h2>
    <div class="grid gap-6 pb-6 lg:grid-cols-2 lg:gap-0">
      {
        projects.map((project) => (
          <article class="p-2 xs:p-4 sm:p-7 lg:p-14">
            <div class="flex justify-center">
              <h3 class="decoration-3 text-center font-fancy text-3xl text-primary underline decoration-secondary underline-offset-4 xs:text-4xl md:text-5xl">
                <a href={project.project_href}>{project.name}</a>
              </h3>
            </div>
            <div>
              <a href={project.project_href}>
                <Image
                  class="paused animate-rise-appear opacity-0"
                  src={project.image}
                  alt={`${project.name} Screenshot`}
                />
              </a>
            </div>
            <p class="pb-2 text-center text-xl text-white sm:text-2xl">
              {project.description}
            </p>
            <p class="pb-2 text-center text-lg text-primary sm:text-xl">
              {project.tools}
            </p>
            <p class="text-center text-lg text-primary sm:text-xl">
              <a class="underline" href={project.project_href}>
                Visit App
              </a>
              {project.source_code_href && (
                <>
                  {" "}
                  |{" "}
                  <a class="underline" href={project.source_code_href}>
                    Source Code
                  </a>
                </>
              )}
            </p>
          </article>
        ))
      }
    </div>
  </div>
</section>

<script>
  import observer from "../../utils/observer";
  import { PROJECTS_ID } from "../../utils/section-id-list";

  const laptop_imgs = document.querySelectorAll(`#${PROJECTS_ID} article img`);
  if (!laptop_imgs.length) throw new Error("No projects found.");

  laptop_imgs.forEach((image) => observer.observe(image));
</script>
